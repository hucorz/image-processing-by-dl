{"env_info": "sys.platform: linux\nPython: 3.8.0 (default, Nov  6 2019, 21:49:08) [GCC 7.3.0]\nCUDA available: True\nGPU 0: NVIDIA GeForce GTX 1650\nCUDA_HOME: /usr/local/cuda\nNVCC: Cuda compilation tools, release 10.2, V10.2.8\nGCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0\nPyTorch: 1.8.2\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.7.0 (Git Hash 7aed236906b1f7a05c0917e5257a1af05e9ff683)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 10.2\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 7.6.5\n  - Magma 2.5.2\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=10.2, CUDNN_VERSION=7.6.5, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.8.2, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.9.2\nOpenCV: 4.5.5\nMMCV: 1.5.0\nMMCV Compiler: GCC 7.5\nMMCV CUDA Compiler: 10.2\nMMClassification: 0.23.0+cfcbca4", "seed": 1304070403, "mmcls_version": "0.23.0", "config": "model = dict(\n    type='ImageClassifier',\n    backbone=dict(\n        type='ResNet',\n        depth=50,\n        num_stages=4,\n        out_indices=(3, ),\n        style='pytorch',\n        frozen_stages=3,\n        init_cfg=dict(\n            type='Pretrained',\n            checkpoint='checkpoint/resnet50_8xb32_in1k_20210831-ea4938fc.pth',\n            prefix='backbone')),\n    neck=dict(type='GlobalAveragePooling'),\n    head=dict(\n        type='LinearClsHead',\n        num_classes=5,\n        in_channels=2048,\n        loss=dict(type='CrossEntropyLoss', loss_weight=1.0),\n        topk=(1, )))\noptimizer = dict(type='SGD', lr=0.005, momentum=0.9, weight_decay=0.0001)\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(policy='step', step=3, gamma=0.1)\nrunner = dict(type='EpochBasedRunner', max_epochs=5)\ncheckpoint_config = dict(interval=1)\nlog_config = dict(interval=10, hooks=[dict(type='TextLoggerHook')])\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = 'checkpoint/resnet50_8xb32_in1k_20210831-ea4938fc.pth'\nresume_from = None\nworkflow = [('train', 1)]\ncheckpoint_path = 'checkpoint/resnet50_8xb32_in1k_20210831-ea4938fc.pth'\ndataset_type = 'ImageNet'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='RandomResizedCrop', size=224),\n    dict(type='RandomFlip', flip_prob=0.5, direction='horizontal'),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='ImageToTensor', keys=['img']),\n    dict(type='ToTensor', keys=['gt_label']),\n    dict(type='Collect', keys=['img', 'gt_label'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='Resize', size=(256, -1)),\n    dict(type='CenterCrop', crop_size=224),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='ImageToTensor', keys=['img']),\n    dict(type='Collect', keys=['img'])\n]\ndata = dict(\n    samples_per_gpu=32,\n    workers_per_gpu=4,\n    train=dict(\n        type='ImageNet',\n        data_prefix='data/flower_data/train',\n        ann_file='data/flower_data/train_annotations.txt',\n        classes='data/flower_data/classes.txt',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='RandomResizedCrop', size=224),\n            dict(type='RandomFlip', flip_prob=0.5, direction='horizontal'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='ToTensor', keys=['gt_label']),\n            dict(type='Collect', keys=['img', 'gt_label'])\n        ]),\n    val=dict(\n        type='ImageNet',\n        data_prefix='data/flower_data/val',\n        ann_file='data/flower_data/val_annotations.txt',\n        classes='data/flower_data/classes.txt',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='Resize', size=(256, -1)),\n            dict(type='CenterCrop', crop_size=224),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ]))\nevaluation = dict(metric='accuracy', metric_options=dict(topk=(1, )))\nwork_dir = './work_dirs/resnet50_1xb32_flower'\ngpu_ids = [0]\nseed = 1304070403\n", "CLASSES": ["daisy", "dandelion", "roses", "sunflowers", "tulips"]}
{"mode": "train", "epoch": 1, "iter": 10, "lr": 0.005, "memory": 542, "data_time": 0.22518, "loss": 1.30096, "time": 0.47653}
{"mode": "train", "epoch": 1, "iter": 20, "lr": 0.005, "memory": 542, "data_time": 0.00556, "loss": 0.66554, "time": 0.22404}
{"mode": "train", "epoch": 1, "iter": 30, "lr": 0.005, "memory": 542, "data_time": 0.00558, "loss": 0.4688, "time": 0.2241}
{"mode": "train", "epoch": 1, "iter": 40, "lr": 0.005, "memory": 542, "data_time": 0.00559, "loss": 0.5988, "time": 0.22454}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.005, "memory": 542, "data_time": 0.00563, "loss": 0.36187, "time": 0.22468}
{"mode": "train", "epoch": 1, "iter": 60, "lr": 0.005, "memory": 542, "data_time": 0.00559, "loss": 0.40935, "time": 0.22488}
{"mode": "train", "epoch": 1, "iter": 70, "lr": 0.005, "memory": 542, "data_time": 0.00566, "loss": 0.28691, "time": 0.22516}
{"mode": "train", "epoch": 1, "iter": 80, "lr": 0.005, "memory": 542, "data_time": 0.00557, "loss": 0.3598, "time": 0.22515}
{"mode": "train", "epoch": 1, "iter": 90, "lr": 0.005, "memory": 542, "data_time": 0.0058, "loss": 0.413, "time": 0.22514}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.005, "memory": 542, "data_time": 0.00565, "loss": 0.44551, "time": 0.22542}
{"mode": "val", "epoch": 1, "iter": 12, "lr": 0.005, "accuracy_top-1": 92.58242}
{"mode": "train", "epoch": 2, "iter": 10, "lr": 0.005, "memory": 542, "data_time": 0.21252, "loss": 0.22417, "time": 0.43257}
{"mode": "train", "epoch": 2, "iter": 20, "lr": 0.005, "memory": 542, "data_time": 0.00582, "loss": 0.24908, "time": 0.22588}
{"mode": "train", "epoch": 2, "iter": 30, "lr": 0.005, "memory": 542, "data_time": 0.00569, "loss": 0.28747, "time": 0.22597}
{"mode": "train", "epoch": 2, "iter": 40, "lr": 0.005, "memory": 542, "data_time": 0.00582, "loss": 0.27672, "time": 0.22628}
{"mode": "train", "epoch": 2, "iter": 50, "lr": 0.005, "memory": 542, "data_time": 0.00578, "loss": 0.21983, "time": 0.22655}
{"mode": "train", "epoch": 2, "iter": 60, "lr": 0.005, "memory": 542, "data_time": 0.0056, "loss": 0.19448, "time": 0.22642}
{"mode": "train", "epoch": 2, "iter": 70, "lr": 0.005, "memory": 542, "data_time": 0.00565, "loss": 0.27151, "time": 0.22627}
{"mode": "train", "epoch": 2, "iter": 80, "lr": 0.005, "memory": 542, "data_time": 0.0063, "loss": 0.21542, "time": 0.22706}
{"mode": "train", "epoch": 2, "iter": 90, "lr": 0.005, "memory": 542, "data_time": 0.00625, "loss": 0.22867, "time": 0.22957}
{"mode": "train", "epoch": 2, "iter": 100, "lr": 0.005, "memory": 542, "data_time": 0.00609, "loss": 0.18509, "time": 0.23109}
{"mode": "val", "epoch": 2, "iter": 12, "lr": 0.005, "accuracy_top-1": 92.30769}
{"mode": "train", "epoch": 3, "iter": 10, "lr": 0.005, "memory": 542, "data_time": 0.21147, "loss": 0.23051, "time": 0.43415}
{"mode": "train", "epoch": 3, "iter": 20, "lr": 0.005, "memory": 542, "data_time": 0.00594, "loss": 0.18922, "time": 0.23431}
{"mode": "train", "epoch": 3, "iter": 30, "lr": 0.005, "memory": 542, "data_time": 0.00621, "loss": 0.20662, "time": 0.2351}
{"mode": "train", "epoch": 3, "iter": 40, "lr": 0.005, "memory": 542, "data_time": 0.00595, "loss": 0.20218, "time": 0.23445}
{"mode": "train", "epoch": 3, "iter": 50, "lr": 0.005, "memory": 542, "data_time": 0.00618, "loss": 0.15016, "time": 0.23495}
{"mode": "train", "epoch": 3, "iter": 60, "lr": 0.005, "memory": 542, "data_time": 0.00599, "loss": 0.16415, "time": 0.23437}
{"mode": "train", "epoch": 3, "iter": 70, "lr": 0.005, "memory": 542, "data_time": 0.00634, "loss": 0.20272, "time": 0.23438}
{"mode": "train", "epoch": 3, "iter": 80, "lr": 0.005, "memory": 542, "data_time": 0.00617, "loss": 0.1748, "time": 0.23446}
{"mode": "train", "epoch": 3, "iter": 90, "lr": 0.005, "memory": 542, "data_time": 0.00617, "loss": 0.16139, "time": 0.23446}
{"mode": "train", "epoch": 3, "iter": 100, "lr": 0.005, "memory": 542, "data_time": 0.00635, "loss": 0.18607, "time": 0.23454}
{"mode": "val", "epoch": 3, "iter": 12, "lr": 0.005, "accuracy_top-1": 93.4066}
{"mode": "train", "epoch": 4, "iter": 10, "lr": 0.0005, "memory": 542, "data_time": 0.21286, "loss": 0.15192, "time": 0.44155}
{"mode": "train", "epoch": 4, "iter": 20, "lr": 0.0005, "memory": 542, "data_time": 0.00595, "loss": 0.09458, "time": 0.23461}
{"mode": "train", "epoch": 4, "iter": 30, "lr": 0.0005, "memory": 542, "data_time": 0.00611, "loss": 0.15839, "time": 0.23446}
{"mode": "train", "epoch": 4, "iter": 40, "lr": 0.0005, "memory": 542, "data_time": 0.00615, "loss": 0.11985, "time": 0.2344}
{"mode": "train", "epoch": 4, "iter": 50, "lr": 0.0005, "memory": 542, "data_time": 0.00613, "loss": 0.12386, "time": 0.23447}
{"mode": "train", "epoch": 4, "iter": 60, "lr": 0.0005, "memory": 542, "data_time": 0.00649, "loss": 0.12447, "time": 0.23445}
{"mode": "train", "epoch": 4, "iter": 70, "lr": 0.0005, "memory": 542, "data_time": 0.00622, "loss": 0.08535, "time": 0.2345}
{"mode": "train", "epoch": 4, "iter": 80, "lr": 0.0005, "memory": 542, "data_time": 0.00619, "loss": 0.10302, "time": 0.23456}
{"mode": "train", "epoch": 4, "iter": 90, "lr": 0.0005, "memory": 542, "data_time": 0.00617, "loss": 0.13594, "time": 0.23466}
{"mode": "train", "epoch": 4, "iter": 100, "lr": 0.0005, "memory": 542, "data_time": 0.00657, "loss": 0.12305, "time": 0.23481}
{"mode": "val", "epoch": 4, "iter": 12, "lr": 0.0005, "accuracy_top-1": 93.95605}
{"mode": "train", "epoch": 5, "iter": 10, "lr": 0.0005, "memory": 542, "data_time": 0.21202, "loss": 0.08914, "time": 0.44033}
{"mode": "train", "epoch": 5, "iter": 20, "lr": 0.0005, "memory": 542, "data_time": 0.00612, "loss": 0.07695, "time": 0.23439}
{"mode": "train", "epoch": 5, "iter": 30, "lr": 0.0005, "memory": 542, "data_time": 0.00616, "loss": 0.09266, "time": 0.23457}
{"mode": "train", "epoch": 5, "iter": 40, "lr": 0.0005, "memory": 542, "data_time": 0.00612, "loss": 0.10805, "time": 0.23437}
{"mode": "train", "epoch": 5, "iter": 50, "lr": 0.0005, "memory": 542, "data_time": 0.0062, "loss": 0.12362, "time": 0.23437}
{"mode": "train", "epoch": 5, "iter": 60, "lr": 0.0005, "memory": 542, "data_time": 0.00612, "loss": 0.11685, "time": 0.23465}
{"mode": "train", "epoch": 5, "iter": 70, "lr": 0.0005, "memory": 542, "data_time": 0.00598, "loss": 0.08893, "time": 0.23419}
{"mode": "train", "epoch": 5, "iter": 80, "lr": 0.0005, "memory": 542, "data_time": 0.00633, "loss": 0.10519, "time": 0.23451}
{"mode": "train", "epoch": 5, "iter": 90, "lr": 0.0005, "memory": 542, "data_time": 0.00614, "loss": 0.10192, "time": 0.23472}
{"mode": "train", "epoch": 5, "iter": 100, "lr": 0.0005, "memory": 542, "data_time": 0.00588, "loss": 0.11729, "time": 0.2343}
{"mode": "val", "epoch": 5, "iter": 12, "lr": 0.0005, "accuracy_top-1": 93.95605}
